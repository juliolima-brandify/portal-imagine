#!/usr/bin/env node

/**
 * Script para criar o primeiro administrador do sistema
 * Execute ap√≥s o deploy em produ√ß√£o
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.production' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!')
  console.error('Certifique-se de que NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function createFirstAdmin() {
  console.log('üöÄ Criando primeiro administrador do sistema...')
  
  // Dados do primeiro admin
  const adminData = {
    email: 'admin@institutoimagine.org',
    password: 'AdminImagine2024!',
    name: 'Administrador Instituto Imagine',
    role: 'admin'
  }
  
  try {
    console.log('üìß Criando usu√°rio no Supabase Auth...')
    
    // Criar usu√°rio no Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: adminData.email,
      password: adminData.password,
      email_confirm: true,
      user_metadata: {
        name: adminData.name
      }
    })

    if (authError) {
      console.error('‚ùå Erro ao criar usu√°rio no Auth:', authError.message)
      return false
    }

    console.log('‚úÖ Usu√°rio criado no Auth:', authData.user.id)

    // Criar perfil com role admin
    console.log('üë§ Criando perfil de administrador...')
    const { error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: authData.user.id,
        email: adminData.email,
        name: adminData.name,
        role: 'admin'
      })

    if (profileError) {
      console.error('‚ùå Erro ao criar perfil:', profileError.message)
      // Tentar limpar o usu√°rio criado
      await supabase.auth.admin.deleteUser(authData.user.id)
      return false
    }

    console.log('‚úÖ Perfil de administrador criado com sucesso!')
    
    console.log('\nüéâ PRIMEIRO ADMIN CRIADO COM SUCESSO!')
    console.log('üìß Email:', adminData.email)
    console.log('üîë Senha:', adminData.password)
    console.log('üåê URL Admin:', 'https://portal.imagineinstituto.com/admin/dashboard')
    
    console.log('\n‚ö†Ô∏è  IMPORTANTE:')
    console.log('1. Fa√ßa login com essas credenciais')
    console.log('2. Altere a senha imediatamente')
    console.log('3. Crie outros administradores se necess√°rio')
    console.log('4. Delete este script ap√≥s o uso por seguran√ßa')
    
    return true

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message)
    return false
  }
}

async function checkExistingAdmins() {
  console.log('üîç Verificando administradores existentes...')
  
  try {
    const { data: admins, error } = await supabase
      .from('profiles')
      .select('id, email, name, role')
      .eq('role', 'admin')

    if (error) {
      console.error('‚ùå Erro ao verificar admins:', error.message)
      return false
    }

    if (admins && admins.length > 0) {
      console.log(`‚úÖ ${admins.length} administrador(es) encontrado(s):`)
      admins.forEach(admin => {
        console.log(`   - ${admin.name} (${admin.email})`)
      })
      return true
    } else {
      console.log('‚ö†Ô∏è  Nenhum administrador encontrado')
      return false
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar admins:', error.message)
    return false
  }
}

async function main() {
  console.log('üéØ SETUP DO PRIMEIRO ADMINISTRADOR')
  console.log('=====================================\n')

  // Verificar se j√° existem admins
  const hasAdmins = await checkExistingAdmins()
  
  if (hasAdmins) {
    console.log('\n‚ùì J√° existem administradores no sistema.')
    console.log('Deseja mesmo criar um novo administrador?')
    console.log('Pressione Ctrl+C para cancelar ou Enter para continuar...')
    
    // Aguardar input do usu√°rio
    await new Promise(resolve => {
      process.stdin.once('data', () => resolve())
    })
  }

  const success = await createFirstAdmin()
  
  if (success) {
    console.log('\n‚úÖ Setup conclu√≠do com sucesso!')
    process.exit(0)
  } else {
    console.log('\n‚ùå Falha no setup do administrador')
    process.exit(1)
  }
}

// Executar script
main().catch(console.error)
