#!/usr/bin/env node

/**
 * Script para verificar o schema da tabela donations
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkDonationsSchema() {
  console.log('üîç Verificando Schema da Tabela Donations')
  console.log('========================================')
  
  try {
    // Tentar buscar uma doa√ß√£o para ver o schema
    console.log('\n1. üìä Testando consulta b√°sica...')
    const { data: donations, error } = await supabase
      .from('donations')
      .select('*')
      .limit(1)
    
    if (error) {
      console.error('‚ùå Erro ao acessar tabela donations:', error.message)
      return
    }
    
    console.log('‚úÖ Tabela donations acess√≠vel')
    console.log(`üìà Total de registros: ${donations?.length || 0}`)
    
    if (donations && donations.length > 0) {
      console.log('\nüìã Schema da tabela donations:')
      const firstDonation = donations[0]
      Object.keys(firstDonation).forEach(key => {
        console.log(`   - ${key}: ${typeof firstDonation[key]} = ${firstDonation[key]}`)
      })
    } else {
      console.log('\n‚ö†Ô∏è Tabela donations est√° vazia')
    }
    
    // Testar inser√ß√£o de doa√ß√£o com campos b√°sicos
    console.log('\n2. ‚ûï Testando inser√ß√£o com campos b√°sicos...')
    const testDonation = {
      amount: 100.00,
      status: 'completed',
      payment_method: 'PIX',
      transaction_id: `TEST-${Date.now()}`
    }
    
    const { data: insertedDonation, error: insertError } = await supabase
      .from('donations')
      .insert([testDonation])
      .select()
    
    if (insertError) {
      console.log('‚ö†Ô∏è Erro ao inserir doa√ß√£o:', insertError.message)
      console.log('üí° Campos dispon√≠veis podem ser diferentes')
    } else {
      console.log('‚úÖ Doa√ß√£o inserida com sucesso')
      console.log('üìã Campos inseridos:', Object.keys(insertedDonation[0]))
      
      // Limpar doa√ß√£o de teste
      await supabase
        .from('donations')
        .delete()
        .eq('id', insertedDonation[0].id)
      console.log('üßπ Doa√ß√£o de teste removida')
    }
    
    // Verificar se existe tabela profiles
    console.log('\n3. üë• Verificando tabela profiles...')
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1)
    
    if (profilesError) {
      console.log('‚ö†Ô∏è Tabela profiles n√£o encontrada:', profilesError.message)
    } else {
      console.log('‚úÖ Tabela profiles acess√≠vel')
      console.log(`üìà Total de perfis: ${profiles?.length || 0}`)
    }
    
    // Verificar se existe tabela projects
    console.log('\n4. üéØ Verificando tabela projects...')
    const { data: projects, error: projectsError } = await supabase
      .from('projects')
      .select('*')
      .limit(1)
    
    if (projectsError) {
      console.log('‚ö†Ô∏è Tabela projects n√£o encontrada:', projectsError.message)
    } else {
      console.log('‚úÖ Tabela projects acess√≠vel')
      console.log(`üìà Total de projetos: ${projects?.length || 0}`)
    }
    
    console.log('\n‚úÖ Verifica√ß√£o do schema conclu√≠da!')
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message)
  }
}

checkDonationsSchema()
