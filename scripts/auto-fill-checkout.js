// =============================================
// SCRIPT PARA PREENCHER CHECKOUT AUTOMATICAMENTE
// =============================================
// 
// Como usar:
// 1. Abra o console do navegador (F12)
// 2. Cole este script
// 3. Execute: autoFillCheckout()
//
// Ou execute diretamente: autoFillCheckout('550e8400-e29b-41d4-a716-446655440002', 100)

function autoFillCheckout(projectId = '550e8400-e29b-41d4-a716-446655440002', amount = 100) {
  console.log('üöÄ Iniciando preenchimento autom√°tico do checkout...')
  console.log('üîç Inspecionando elementos da p√°gina...')
  
  // Debug: mostrar todos os inputs dispon√≠veis
  const allInputs = document.querySelectorAll('input, textarea, button')
  console.log(`üìã Encontrados ${allInputs.length} elementos:`, allInputs)
  
  try {
    // 1. Selecionar valor da doa√ß√£o
    const amountButtons = document.querySelectorAll('button[class*="border-2"]')
    if (amountButtons.length > 0) {
      // Clicar no primeiro bot√£o de valor (R$ 50)
      amountButtons[0].click()
      console.log('‚úÖ Valor da doa√ß√£o selecionado: R$ 50')
    } else {
      console.log('‚ö†Ô∏è Bot√µes de valor n√£o encontrados')
    }
    
    // 2. Preencher nome
    const nameInput = document.querySelector('input[placeholder*="Nome"]') || 
                     document.querySelector('input[type="text"]')
    if (nameInput) {
      nameInput.value = 'Jo√£o Silva'
      nameInput.dispatchEvent(new Event('input', { bubbles: true }))
      console.log('‚úÖ Nome preenchido: Jo√£o Silva')
    } else {
      console.log('‚ö†Ô∏è Campo nome n√£o encontrado')
    }
    
    // 3. Preencher email
    const emailInput = document.querySelector('input[placeholder*="email"]') ||
                      document.querySelector('input[type="email"]')
    if (emailInput) {
      emailInput.value = 'joao.silva@email.com'
      emailInput.dispatchEvent(new Event('input', { bubbles: true }))
      console.log('‚úÖ Email preenchido: joao.silva@email.com')
    } else {
      console.log('‚ö†Ô∏è Campo email n√£o encontrado')
    }
    
    // 4. Preencher nome no cart√£o
    const cardNameInput = document.querySelector('input[placeholder*="Nome completo"]') ||
                         document.querySelector('input[placeholder*="Nome no cart√£o"]')
    if (cardNameInput) {
      cardNameInput.value = 'Jo√£o Silva'
      cardNameInput.dispatchEvent(new Event('input', { bubbles: true }))
      console.log('‚úÖ Nome no cart√£o preenchido: Jo√£o Silva')
    } else {
      console.log('‚ö†Ô∏è Campo nome no cart√£o n√£o encontrado')
    }
    
    // 5. Preencher n√∫mero do cart√£o
    const cardNumberInput = document.querySelector('input[placeholder*="1234 1234 1234 1234"]') ||
                           document.querySelector('input[placeholder*="N√∫mero do cart√£o"]')
    if (cardNumberInput) {
      cardNumberInput.value = '4242 4242 4242 4242'
      cardNumberInput.dispatchEvent(new Event('input', { bubbles: true }))
      console.log('‚úÖ N√∫mero do cart√£o preenchido: 4242 4242 4242 4242 (Visa)')
    } else {
      console.log('‚ö†Ô∏è Campo n√∫mero do cart√£o n√£o encontrado')
    }
    
    // 6. Preencher validade
    const expiryInput = document.querySelector('input[placeholder*="MM / AA"]') ||
                       document.querySelector('input[placeholder*="Validade"]')
    if (expiryInput) {
      expiryInput.value = '12 / 25'
      expiryInput.dispatchEvent(new Event('input', { bubbles: true }))
      console.log('‚úÖ Validade preenchida: 12 / 25')
    } else {
      console.log('‚ö†Ô∏è Campo validade n√£o encontrado')
    }
    
    // 7. Preencher CVC
    const cvcInput = document.querySelector('input[placeholder*="123"]') ||
                    document.querySelector('input[placeholder*="CVC"]')
    if (cvcInput) {
      cvcInput.value = '123'
      cvcInput.dispatchEvent(new Event('input', { bubbles: true }))
      console.log('‚úÖ CVC preenchido: 123')
    } else {
      console.log('‚ö†Ô∏è Campo CVC n√£o encontrado')
    }
    
    // 8. Ativar doa√ß√£o recorrente (opcional)
    const recurringToggle = document.querySelector('button[class*="bg-gray-200"]')
    if (recurringToggle) {
      recurringToggle.click()
      console.log('‚úÖ Doa√ß√£o recorrente ativada')
    }
    
    // 9. Ativar mensagem (opcional)
    const messageToggles = document.querySelectorAll('button[class*="bg-gray-200"]')
    if (messageToggles.length > 1) {
      messageToggles[1].click()
      console.log('‚úÖ Mensagem ativada')
      
      // Preencher mensagem
      const messageInput = document.querySelector('textarea[placeholder*="mensagem"]')
      if (messageInput) {
        messageInput.value = 'Parab√©ns pelo projeto! Continuem com o excelente trabalho.'
        messageInput.dispatchEvent(new Event('input', { bubbles: true }))
        console.log('‚úÖ Mensagem preenchida')
      }
    }
    
    console.log('üéâ Preenchimento autom√°tico conclu√≠do!')
    console.log('üí° Agora voc√™ pode clicar em "Finalizar doa√ß√£o" para testar')
    
    return {
      success: true,
      message: 'Checkout preenchido automaticamente!',
      data: {
        name: 'Jo√£o Silva',
        email: 'joao.silva@email.com',
        cardNumber: '4242 4242 4242 4242',
        expiry: '12 / 25',
        cvc: '123',
        amount: 50
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao preencher checkout:', error)
    return {
      success: false,
      error: error.message
    }
  }
}

// =============================================
// FUN√á√ïES AUXILIARES
// =============================================

// Fun√ß√£o para limpar todos os campos
function clearCheckout() {
  console.log('üßπ Limpando checkout...')
  
  const inputs = document.querySelectorAll('input, textarea')
  inputs.forEach(input => {
    if (input.type !== 'checkbox' && input.type !== 'radio') {
      input.value = ''
      input.dispatchEvent(new Event('input', { bubbles: true }))
    }
  })
  
  // Desmarcar toggles
  const toggles = document.querySelectorAll('button[class*="bg-green-600"]')
  toggles.forEach(toggle => toggle.click())
  
  console.log('‚úÖ Checkout limpo!')
}

// Fun√ß√£o para testar diferentes cart√µes
function testCard(cardType = 'visa') {
  const cards = {
    visa: '4242 4242 4242 4242',
    mastercard: '5555 5555 5555 4444',
    amex: '3782 822463 10005',
    declined: '4000 0000 0000 0002',
    insufficient: '4000 0000 0000 9995'
  }
  
  const cardNumber = cards[cardType]
  if (!cardNumber) {
    console.error('‚ùå Tipo de cart√£o inv√°lido. Use: visa, mastercard, amex, declined, insufficient')
    return
  }
  
  const cardNumberInput = document.querySelector('input[placeholder*="1234 1234 1234 1234"]')
  if (cardNumberInput) {
    cardNumberInput.value = cardNumber
    cardNumberInput.dispatchEvent(new Event('input', { bubbles: true }))
    console.log(`‚úÖ Cart√£o ${cardType} preenchido: ${cardNumber}`)
  }
}

// Fun√ß√£o para preencher com dados espec√≠ficos
function fillWithData(data) {
  console.log('üìù Preenchendo com dados customizados...', data)
  
  // Nome
  if (data.name) {
    const nameInput = document.querySelector('input[placeholder*="Nome"]')
    if (nameInput) {
      nameInput.value = data.name
      nameInput.dispatchEvent(new Event('input', { bubbles: true }))
    }
  }
  
  // Email
  if (data.email) {
    const emailInput = document.querySelector('input[placeholder*="email"]')
    if (emailInput) {
      emailInput.value = data.email
      emailInput.dispatchEvent(new Event('input', { bubbles: true }))
    }
  }
  
  // Valor
  if (data.amount) {
    const amountButtons = document.querySelectorAll('button[class*="border-2"]')
    if (amountButtons.length > 0) {
      amountButtons[0].click()
    }
  }
  
  console.log('‚úÖ Dados customizados preenchidos!')
}

// =============================================
// COMANDOS R√ÅPIDOS
// =============================================

console.log(`
üéØ COMANDOS DISPON√çVEIS:

1. autoFillCheckout() - Preenche com dados padr√£o
2. autoFillCheckout('project-id', 100) - Preenche com projeto e valor espec√≠ficos
3. clearCheckout() - Limpa todos os campos
4. testCard('visa') - Testa cart√£o Visa
5. testCard('mastercard') - Testa cart√£o MasterCard
6. testCard('amex') - Testa cart√£o American Express
7. testCard('declined') - Testa cart√£o recusado
8. fillWithData({name: 'Jo√£o', email: 'joao@email.com'}) - Dados customizados

üí° Exemplo de uso:
   autoFillCheckout()
   // Aguarde 1 segundo
   // Clique em "Finalizar doa√ß√£o"
`)

// Exportar fun√ß√µes para uso global
window.autoFillCheckout = autoFillCheckout
window.clearCheckout = clearCheckout
window.testCard = testCard
window.fillWithData = fillWithData

console.log('‚úÖ Script carregado! Use autoFillCheckout() para come√ßar.')
